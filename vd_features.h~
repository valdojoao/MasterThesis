
bool detectRightEye(vector<Rect> faces, vector<Rect> rEyes, vector<Rect> rClosedEyes, UMat frame, UMat frame_gray,int i){

	struct timespec t, now, open, closed;

	//right eye region of interrest, upper right side of face
	Rect rROI = Rect(faces[i].x , (faces[i].y + faces[i].height/4), faces[i].width/2, faces[i].height/2.75);

	//detect open or closed eyes
	clock_gettime(CLOCK_MONOTONIC, &t);
	rEyes_cascade.detectMultiScale(frame_gray(rROI), rEyes, 1.1, 2, CASCADE_FIND_BIGGEST_OBJECT, Size(30, 30));
	clock_gettime(CLOCK_MONOTONIC, &now);
	printf ("face %d: %d right eye found in: %4.3f [ms]\n", i, rEyes.size(), diff(t,now).tv_nsec/1000000.0);

	//imshow("Face detection", frame(rROI));
	//cvWaitKey(0);

	if(!rEyes.empty()) { //show detected right eye and determine if its opened or closed

		sleeptime[i]++;  		
		showFeatures(rEyes, frame, rROI, 1, 255, 0, 0); 

		clock_gettime(CLOCK_MONOTONIC, &open);
		eyesCld_cascade.detectMultiScale(frame_gray(rROI), rClosedEyes, 1.2, 2, CASCADE_FIND_BIGGEST_OBJECT, Size(30, 30)); 
		clock_gettime(CLOCK_MONOTONIC, &closed);
		printf ("face %d: right eye closed/open determined in: %4.3f [ms]\n", i, diff(open, closed).tv_nsec/1000000.0);

		if(!rClosedEyes.empty()){ 	//if eye is open show pupil
			circle(frame(rROI), Point(rEyes[0].x+rEyes[0].width/2, rEyes[0].y+rEyes[0].height/1.5), 3, Scalar(0, 255, 0), -1, 8);
			sleeptime[i] = 0;	//person is awake
		}
		
		return true;		
	} else return false;		
}


bool detectLeftEye(vector<Rect> faces, vector<Rect> lEyes, vector<Rect> lClosedEyes, UMat frame, UMat frame_gray, int i){

	struct timespec t, now, open, closed;

	//left region of interrest, upper left side of face
	//Rect lROI = Rect(faces[i].x + faces[i].width/2.5, (faces[i].y + faces[i].height/4), faces[i].width/2, faces[i].height/2.75);
	Rect lROI = Rect(faces[i].x + faces[i].width/2, (faces[i].y + faces[i].height/4), faces[i].width/2, faces[i].height/2.75);

	//detect open or closed eyes
	clock_gettime(CLOCK_MONOTONIC, &t);
	lEyes_cascade.detectMultiScale(frame_gray(lROI), lEyes, 1.1, 2, CASCADE_FIND_BIGGEST_OBJECT, Size(30, 30));
	clock_gettime(CLOCK_MONOTONIC, &now);
	printf ("face %d: %d left eye found in: %4.3f [ms]\n", i, lEyes.size(), diff(t,now).tv_nsec/1000000.0);

	//imshow("Face detection", frame(lROI));
	//cvWaitKey(0);
	if(!lEyes.empty()) { //show detected left eye and determine if its opened or closed
		showFeatures(lEyes, frame, lROI, 1, 255, 0, 0);

		clock_gettime(CLOCK_MONOTONIC, &open);
		eyesCld_cascade.detectMultiScale(frame_gray(lROI), lClosedEyes, 1.2, 2, CASCADE_FIND_BIGGEST_OBJECT, Size(30, 30));
		clock_gettime(CLOCK_MONOTONIC, &closed);
		printf ("face %d: left eye closed/open determined in: %4.3f [ms]\n", i, diff(open, closed).tv_nsec/1000000.0);

		if(!lClosedEyes.empty())  
			circle(frame(lROI), Point(lEyes[0].x+lEyes[0].width/2, lEyes[0].y+lEyes[0].height/1.5), 3,Scalar(0, 255, 0), -1, 8);
		return true;
	} else return false;			
}


bool detectMouth(vector<Rect> faces, vector<Rect> mouth, UMat frame, UMat frame_gray,int i){

	struct timespec t, now;

	//mouth region of interrest, lower part of face
	Rect mouthROI = Rect((faces[i].x + faces[i].width/4), (faces[i].y + faces[i].height/1.5), faces[i].width/1.8, faces[i].height/2.75);

	
	//detect mouth
	clock_gettime(CLOCK_MONOTONIC, &t);
	mouth_cascade.detectMultiScale(frame_gray(mouthROI),mouth, 1.2, 5, CASCADE_FIND_BIGGEST_OBJECT, Size(30, 30));
	clock_gettime(CLOCK_MONOTONIC, &now);
	printf ("face %d: %d mouth found in: %4.3f [ms]\n", i, mouth.size(), diff(t,now).tv_nsec/1000000.0);

	//show detected mouth
	if(!mouth.empty()) { 
		showFeatures(mouth, frame, mouthROI, 1, 255, 255, 0); 
		return true;
	} else	return false;		
}


bool detectNose(vector<Rect> faces, vector<Rect> nose, UMat frame, UMat frame_gray,int i){

	struct timespec t, now;	

	//nose region of interest, central part of face
	Rect noseROI = Rect((faces[i].x + faces[i].width/4), (faces[i].y + faces[i].height/2.2), faces[i].width/1.8, faces[i].height/3);		

	//detect nose
	clock_gettime(CLOCK_MONOTONIC, &t);
	nose_cascade.detectMultiScale(frame_gray(noseROI), nose, 1.20, 5, CASCADE_FIND_BIGGEST_OBJECT, Size(30, 30));
	clock_gettime(CLOCK_MONOTONIC, &now);
	printf ("face %d: %d nose found in: %4.3f [ms]\n", i, nose.size(), diff(t,now).tv_nsec/1000000.0);

	//show detected nose
	if(!nose.empty()) { 
		showFeatures(nose, frame, noseROI, 2, 0, 0, 255); 
		return true;
	} else	return false;		
}
